Q1 암호화 방식
Q1.1 비밀번호를 DB에 저장할 때 Hash를 이용했는데, Hash는 단방향 암호화와 양방향 암호화 중 어떤 암호화 방식에 해당할까요?
A1.1 복호화가 불가능한 단방향 암호화 방식

Q1.2 비밀번호를 그냥 저장하지 않고 Hash 한 값을 저장 했을 때의 좋은 점은 무엇인가요?
A1.2 비밀번호를 해시 함수를 통해 변경하고 SALTING을 여러번 거치면서 다른 누군가에게 노출되었을 때 실제 비밀번호가 무엇인지 확인하기 어렵다.


Q2 인증 방식
Q2.1 JWT(Json Web Token)을 이용해 인증 기능을 했는데, 만약 Access Token이 노출되었을 경우 발생할 수 있는 문제점은 무엇일까요?
A2.1 첫번째로 신원확인을 할 수 없다. 노출된 Access Token을 사용할 경우 실제 사용자와 구분할 수 없다.
    두번째로 db에서 노출된 Access Token을 제거할 수 없다. Access Token은 설정된 기간동안 쓸 수 있는 키이므로 함부로 제거할 수 없다.
    세번쨰로 Access Token의 pay road에 저장된 실사용자 정보가 노출된다. 물론 중요한 정보는 없다.

Q2.2 해당 문제점을 보완하기 위한 방법으로는 어떤 것이 있을까요?
A2.2 Access Token의 사용가능 기간을 줄이고 Refresh Token을 통해 재발급 받는 방식을 이용한다.


Q3 인증과 인가
Q3.1 인증과 인가가 무엇인지 각각 설명해 주세요.
A3.1 인증이란 흔히 하는 로그인 방식이고 인가의 경우 로그인한 곳의 서비스를 제공받을 때 재요구되는 신원확인 방식이다.

Q3.2 위 API 구현 명세에서 인증을 필요로 하는 API와 그렇지 않은 API의 차이가 뭐라고 생각하시나요?
A3.2 상세 내역과 같이 다른 사람에게는 노출되지 않는 정보를 열람할 경우 본인 인증을 한 후 본인인 경우 상세한 정보를 받을 수 있다.

Q3.3 아이템 생성, 수정 API는 인증을 필요로 하지 않는다고 했지만 사실은 어느 API보다도 인증이 필요한 API입니다. 왜 그럴까요?
A3.3 아이템은 게임의 근간에 해당하는 데이터이다. 따라서 임의로 좋은 성능의 아이템을 생성하거나 좋은 성능의 아이템으로 수정하는 것을 방지하기 위해 
.    아이템을 생성, 수정할 수 있는 권한이 있는 사람이라는 것을 인증해야한다.


Q4 Http Status Code
Q4.1 과제를 진행하면서 사용한 Http Status Code를 모두 나열하고, 각각이 의미하는 것과 어떤 상황에 사용했는지 작성해 주세요.
A4.1 status(200) : 요청이 성공한 경우   /   status(400) : 잘못된 요청이 온 경우     /   status(404) : 서버가 요청한 리소스를 찾지 못한 경우     /   status(500) : 서버에서 발생한 알 수 없는 오류


Q5 게임 경제
Q5.1 현재는 간편한 구현을 위해 캐릭터 테이블에 money라는 게임 머니 컬럼만 추가하였습니다. 이렇게 되었을 때 어떠한 단점이 있을 수 있을까요?
A5.1 정확히는 모르겠지만 게임 머니는 아이디, 비밀번호와 같이 중요한 정보에 해당하는 것에 비해 쉽게 노출되는 것 같다.

Q5.2 이렇게 하지 않고 다르게 구현할 수 있는 방법은 어떤 것이 있을까요?
A5.2 모르겠다.

Q5.3 아이템 구입 시에 가격을 클라이언트에서 입력하게 하면 어떠한 문제점이 있을 수 있을까요?
A5.3 게임 서버의 입장에서는 모르겠다.






# ================================================================================================================================================================================================
# 1. 기본 구성요소 만들기
# 1.1 yarn init -y                : 프로젝트 초기화
# 1.2 yarn add express            : express 라이브러리 설치 
# # express                       : Node.js의 웹 프레임워크 중 하나로 웹 애플리케이션과 api를 쉽게 구축할 수 있다. 라우팅, 미들웨어 등을 이용할 수 있다.

# 1.3 yarn add prisma             : prisma 라이브러리 설치 
# # prisma                        : 데이터베이스(db)를 다루는 도구로 ORM과 유사한 기능을 제공한다. 데이터베이스 스키마를 기반으로 여러 데이터베이스 시스템(MYSQL, POSTGRESQL, SQLITE 등)과 호환된다.

# 1.4 yarn add @prisma/client     : @prisma/client 라이브러리 설치
# # @prisma/client                : 데이터베이스(DB)의 CRUD(CREATE READ, UPDATE, DELETE) 작업을 쉽게 수행할 수 있다. 이를 통해 개발자는 복잡한 SQL 쿼리를 직접 작성할 필요 없이 Prisma 모델을 사용하여
# .                                 데이터 베이스와 상호 작용할 수 있다
# .                                 즉 @prisma/client는 Prisma ORM에서 생성된 데이터베이스 모델을 기반으로 데이터베이스에 대한 타입 안전한 쿼리를 실행할 수 있게 해주는 라이브러리 이다.

# 1.5 yarn add cookie-parser      : cookie-parser 라이브러리 설치 
# # cookie-parser                 : express 애플리케이션에서 쿠키를 쉽게 파싱(=해석)하고 생성할 수 있도록 도와주는 미들웨어

# 1.6 yarn add jsonwebtoken       : jsonwebtoken 라이브러리 설치 
# 1.7 yarn add -D nodemon         : nodemon 라이브러리 설치 
# .                               : nodemon이 작동하지 않을 경우 -> npm install -g nodemon 으로 nodemon을 ;   전역으로 설치
# 1.8 npx prisma init             : npx prisma init
# #                               : 실행할 경우 다음과 같은 일이 발생함
# .                               1.8.1. 프로젝트 폴더 내에 Prisma 설정 파일과 관련 파일들이 생성됩니다.
# .                               1.8.2. 데이터베이스 연결에 필요한 설정을 포함한 schema.prisma 파일이 생성됩니다. 이 파일에서는 데이터베이스 스키마를 정의하고 Prisma 모델을 설정할 수 있습니다.
# .                               1.8.3. 필요한 경우, 데이터베이스 연결 URL 등의 설정을 수정할 수 있습니다.
# .                               1.8.4. Prisma 클라이언트를 사용하여 데이터베이스에 쿼리를 보낼 수 있도록 설정됩니다
# 1.9 npx prisma db push --force-reset

# =================================================================================================================================================================================================

# 2. schema.prisma를 통해 각 table의 형식 작성
# 3. schema.prisma를 통해 각 table의 관계 작성
# 4. .env를 통해 db 연결(aws -> rds)
# 5. schema.prisma에서 연결한 db로 변경
# 6. db에 업로드 (: npx prisma db push)

# 7. 각 파일의 용도에 따라 폴더를 만들어서 구분
# 8. router를 이용해 필요한 기능 구현
# 9. bcrypt를 통해 password를 암호화